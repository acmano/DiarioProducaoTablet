<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DeleteRecord" xml:space="preserve">
    <value>DELETE
  FROM OPENQUERY
  (
    {0}
  , '
      SELECT  lor_man_turno.num_serie_lmtrn
        FROM  lor_man_turno
        WHERE lor_man_turno.num_serie_lmtrn = {1}
    '
  )</value>
    <comment>Comando para excluir uma linha da tabela através de sua PK.</comment>
  </data>
  <data name="ExisteAk" xml:space="preserve">
    <value>SELECT  tabela.existe
  FROM  OPENQUERY
  (
    {0}
  , '
      SELECT  DISTINCT 1 AS existe
        FROM  lor_man_turno
        WHERE lor_man_turno.cod_turno = "{1}"
    '
  ) AS tabela</value>
    <comment>Comando para verificar a existência de um registro através de sua AK.</comment>
  </data>
  <data name="ExisteDependencias" xml:space="preserve">
    <value>SELECT  tabela.existe
  FROM  OPENQUERY
  (
    {0}
  , '
      SELECT  DISTINCT 1 AS existe
        FROM  lor_man_producao
        WHERE lor_man_producao.num_serie_lmtrn = {0}
  '
  ) AS tabela</value>
    <comment>Comando para verificar se existem tabelas que dependem da sendo pesquisada, através de sua PK. Colocar vários SELECT's, um para cada tabela a ser verificada, juntos com UNION.</comment>
  </data>
  <data name="ExistePk" xml:space="preserve">
    <value>SELECT  tabela.existe
  FROM  OPENQUERY
  (
    {0}
  , '
      SELECT  DISTINCT 1 AS existe
        FROM  lor_man_turno
        WHERE lor_man_turno.num_serie_lmtrn = {1}
  '
  ) AS tabela</value>
  </data>
  <data name="InsertRecord" xml:space="preserve">
    <value>INSERT
  INTO OPENQUERY
  (
    {0}
  , '
      SELECT  lor_man_turno.num_serie_lme
           ,  lor_man_turno.num_serie_lmtrntp
           ,  lor_man_turno.cod_turno
           ,  lor_man_turno.den_turno
           ,  lor_man_turno.hor_inicio
           ,  lor_man_turno.qtd_minutos
           ,  lor_man_turno.dat_validade_ini
           ,  lor_man_turno.dat_validade_fim
        FROM  lor_man_turno
    '
  )
  VALUES
  (
    SELECT empresa.serie_empresa FROM OPENQUERY ( {0}, 'SELECT lor_man_empresa.num_serie_lme AS serie_empresa FROM lor_man_empresa WHERE lor_man_empresa.cod_empresa = "{1}"') AS empresa
  , SELECT turno_tipo.serie_turno_tipo FROM OPENQUERY ( {0}, 'SELECT lor_man_turno_tipo.num_serie_lmtrntp AS serie_turno_tipo FROM lor_man_turno_tipo WHERE lor_man_turno_tipo.cod_turno_tipo = "{2}"') AS turno_tipo
  , UPPER ( "{3}" )
  , UPPER ( "{4}" )
  , "{5}"
  , {6}
  , "{7}"
  , "{8}"
  )</value>
    <comment>Comando para inserir um registro na tabela.</comment>
  </data>
  <data name="QueryRecordAk" xml:space="preserve">
    <value>SELECT  tabela.serie_turno
     ,  tabela.codigo_empresa
     ,  tabela.codigo_turno_tipo
     ,  tabela.codigo_turno
     ,  tabela.descricao_turno
     ,  tabela.hora_inicio
     ,  tabela.duracao
     ,  tabela.data_validade_inicio
     ,  tabela.data_validade_fim
  FROM  OPENQUERY
  (
    {0}
  , '
      SELECT  lor_man_turno.num_serie_lmtrn              AS serie_turno
           ,  TRIM ( lor_man_empresa.cod_empresa )       AS codigo_empresa
           ,  TRIM ( lor_man_turno_tipo.cod_turno_tipo ) AS codigo_turno_tipo
           ,  TRIM ( lor_man_turno.cod_turno )           AS codigo_turno
           ,  TRIM ( lor_man_turno.den_turno )           AS descricao_turno
           ,  lor_man_turno.hor_inicio                   AS hora_inicio
           ,  lor_man_turno.qtd_minutos                  AS duracao
           ,  lor_man_turno.dat_validade_ini             AS data_validade_inicio
           ,  lor_man_turno.dat_validade_fim             AS data_validade_fim
        FROM  lor_man_turno
        INNER JOIN lor_man_empresa
          ON  lor_man_empresa.num_serie_lme = lor_man_turno.num_serie_lme
        INNER JOIN lor_man_turno_tipo
          ON  lor_man_turno_tipo.num_serie_lmtrntp = lor_man_turno.num_serie_lmtrntp
        WHERE lor_man_empresa.cod_empresa = "{1}"
        AND   lor_man_turno.cod_turno     = "{2}"
  '
  ) AS tabela</value>
  </data>
  <data name="QueryRecordAll" xml:space="preserve">
    <value>SELECT  tabela.serie_turno
     ,  tabela.codigo_empresa
     ,  tabela.codigo_turno_tipo
     ,  tabela.codigo_turno
     ,  tabela.descricao_turno
     ,  tabela.hora_inicio
     ,  tabela.duracao
     ,  tabela.data_validade_inicio
     ,  tabela.data_validade_fim
  FROM  OPENQUERY
  (
    {0}
  , '
      SELECT  lor_man_turno.num_serie_lmtrn              AS serie_turno
           ,  TRIM ( lor_man_empresa.cod_empresa )       AS codigo_empresa
           ,  TRIM ( lor_man_turno_tipo.cod_turno_tipo ) AS codigo_turno_tipo
           ,  TRIM ( lor_man_turno.cod_turno )           AS codigo_turno
           ,  TRIM ( lor_man_turno.den_turno )           AS descricao_turno
           ,  lor_man_turno.hor_inicio                   AS hora_inicio
           ,  lor_man_turno.qtd_minutos                  AS duracao
           ,  lor_man_turno.dat_validade_ini             AS data_validade_inicio
           ,  lor_man_turno.dat_validade_fim             AS data_validade_fim
        FROM  lor_man_turno
        INNER JOIN lor_man_empresa
          ON  lor_man_empresa.num_serie_lme        = lor_man_turno.num_serie_lme
        INNER JOIN lor_man_turno_tipo
          ON  lor_man_turno_tipo.num_serie_lmtrntp = lor_man_turno.num_serie_lmtrntp
        WHERE lor_man_empresa.cod_empresa          = "{1}"
        {2}
        ORDER BY lor_man_empresa.cod_empresa 
            , lor_man_producao.dat_inicio DESC
		        , lor_man_turno.cod_turno
		        , lor_man_linha_montagem.cod_linha_montagem  
  '
  ) AS tabela</value>
    <comment>Comando para obter todos os campos de todas as linhas da tabela ordenadas pela AK.</comment>
  </data>
  <data name="QueryRecordPk" xml:space="preserve">
    <value>SELECT  tabela.serie_turno
     ,  tabela.codigo_empresa
     ,  tabela.codigo_turno_tipo
     ,  tabela.codigo_turno
     ,  tabela.descricao_turno
     ,  tabela.hora_inicio
     ,  tabela.duracao
     ,  tabela.data_validade_inicio
     ,  tabela.data_validade_fim
  FROM  OPENQUERY
  (
    {0}
  , '
      SELECT  lor_man_turno.num_serie_lmtrn              AS serie_turno
           ,  TRIM ( lor_man_empresa.cod_empresa )       AS codigo_empresa
           ,  TRIM ( lor_man_turno_tipo.cod_turno_tipo ) AS codigo_turno_tipo
           ,  TRIM ( lor_man_turno.cod_turno )           AS codigo_turno
           ,  TRIM ( lor_man_turno.den_turno )           AS descricao_turno
           ,  lor_man_turno.hor_inicio                   AS hora_inicio
           ,  lor_man_turno.qtd_minutos                  AS duracao
           ,  lor_man_turno.dat_validade_ini             AS data_validade_inicio
           ,  lor_man_turno.dat_validade_fim             AS data_validade_fim
        FROM  lor_man_turno
        INNER JOIN lor_man_empresa
          ON  lor_man_empresa.num_serie_lme        = lor_man_turno.num_serie_lme
        INNER JOIN lor_man_turno_tipo
          ON  lor_man_turno_tipo.num_serie_lmtrntp = lor_man_turno.num_serie_lmtrntp
        WHERE lor_man_turno.num_serie_lmtrn = {1}
  '
  ) AS tabela</value>
    <comment>Comando para obter todos os campos do registro através de sua PK.</comment>
  </data>
  <data name="TableDescription" xml:space="preserve">
    <value>Turno</value>
  </data>
  <data name="TableName" xml:space="preserve">
    <value>lor_man_turno</value>
  </data>
  <data name="UpdateRecord" xml:space="preserve">
    <value>UPDATE  OPENQUERY
  (
    {0}
  , '
      SELECT  lor_man_turno.den_turno AS descricao_turno
        FROM  lor_man_turno
        WHERE lor_man_turno.num_serie_lmtrn = {1}
    '
  ) 
  SET  descricao_turno = UPPER ( "{2}" )</value>
    <comment>Comando para atualizar um registro através de sua PK.</comment>
  </data>
</root>